#!/bin/env /bin/node
const { exec } = require('node:child_process');
const fs = require('node:fs');
const readline = require('node:readline');
const { stdin: input, stdout: output } = require('node:process');

const cmd = 'git --no-pager diff --staged @ --color=never';

exec(cmd, (error, stdout, stderr) => {
  if (error) {
    console.error(error.message);
    return 1;
  }
  if (stderr) {
    console.error(stderr);
    return 1;
  }
  if (stdout) {
    const lines = stdout.split('\n');
    const files = lines.map(line => line.replace(/^\+\+\+ b\//, '')).filter(line => line);
    const diffText = files.join('\n');

    const systemPromptText = `You are a FullStack engineer who experts in many programming languages.
You are good at writing git commit messages.
You will provide answer in JSON format.

EXAMPLE JSON OUTPUT:
{
    "commit_message": "feat: add new feature"
}
`;
    const promtText = `Give me a git commit message that follows this convension:

\`\`\`
feat: [commit summary]

- description 1
- description 2
- description 3
\`\`\`

Use feat for feature, fix for fix bug, chore for devops or unrelated works, etc.

This is diff content:

\`\`\`diff
${diffText}
\`\`\`
`;

    const config = fs.readFileSync(`${process.env.HOME}/.config/gcm/config`, 'utf8');
    const apiKey = config.match(/api_key\s*=\s*"?([^\"]+)"?/i)[1];

    if (!apiKey) {
      console.error('API key not found in config file.');
      return 1;
    }

    console.log('API key:', apiKey.substring(0, 7) + '...' + apiKey.substring(apiKey.length - 5));
    //console.log('API key:', apiKey);

    const base_url = 'https://api.deepseek.com';

    console.log('Fetching commit message from DeepSeek API...');

    fetch(`${base_url}/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: 'deepseek-chat',
          messages: [{
            role: 'system',
            content: systemPromptText
          }, {
            role: 'user',
            content: promtText
          }],
          temperature: 1,
          max_tokens: 200,
          stream: false,
          response_format: {
            'type': 'json_object'
          }
        }),
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        const jsonText = data.choices[0].message.content;
        const commitMessage = JSON.parse(jsonText).commit_message?.trim();
        if (!commitMessage || commitMessage == '') {
          console.error('No commit message found in response.');
          return 1;
        }

        console.log('Commit message:');
        console.log(commitMessage);

        const rl = readline
          .createInterface({ input, output })
          .question('Do you want to use this commit message? (Y/n) ', (answer) => {
            const finalAnwser = answer?.toLowerCase()?.trim() ?? 'y';
            rl.close();
            if (finalAnwser == '' || finalAnwser === 'y') {
              const execCommitMessage = commitMessage
                .replace(/\\n/g, '\\\\n');

              exec(`git commit -m "${execCommitMessage}"`, (error, stdout, stderr) => {
                  if (error) {
                      console.error(error.message);
                      return 1;
                  }
                  if (stderr) {
                      console.error(stderr);
                      return 1;
                  }
                  console.log(stdout);
              });
            } else {
              console.log('Commit message not used.');
            }
          });

      })
      .catch(err => {
        console.error('Error:', err);
      })
  } else {
    console.log('No staged changes.');
  }
})
